/*******************************************
 * webpos 数据统一存储入口
 * 
 * relation:{tablename:'',idAttribute:'',child:[{tablename:'table_name',key:'id'}]}
 * 
 * ****************************************/
var typeQues = require('./check.js');
var localize = require('./locale/localize.js');
var accessorlib = require('Accessor');
var strUtil = require('./string.js');
var util = require('./util.js');
var async = require('async');

//数据接口内部实现
var InnerDataAPI = function () { }

//公开数据接口
var DataAPI = function () { };

//数据接口 可以接受父子关系表的数据增删改
InnerDataAPI.prototype.rest = function (command, dataObject, relations, callback) {
    if (this.validate(command, dataObject, relations, callback)) {
        switch (command) {
            case 'create':
                return this.create(dataObject, relations, callback);
                break;
            case 'update':
                return this.update(dataObject, relations, callback);
                break;
            case 'read':
                return this.query(dataObject, relations, callback);
                break;
            case 'delete':
                return this.delete(dataObject, relations, callback);
                break;
            default:
                callback(strUtil.Format(localize.restInvalidOperateString, command), null);
                break;
        }
    }
}
//1.新增
InnerDataAPI.prototype.create = function (data, relations, callback) {
    var dbTransAccessor = new accessorlib.SQLiteAccessor(relations.tablename, true, { idAttribute: relations.idAttribute, autoIncrement: relations.autoIncrement });
    var newRelations = this.dataRender(data, relations, callback);
    var self = this;
    var context = { idAttribute: relations.idAttribute, newRelations: newRelations, data: data, callback: callback, dbAccessor: dbTransAccessor };//新增上下文
    //开启事务
    dbTransAccessor.transBegin();
    //新增主表数据
    dbTransAccessor.insert(data, function (err, info) { self.createdMainHandler(err, info, context); });
}
//2.修改
InnerDataAPI.prototype.update = function (data, relations, callback) {
    var dbTransAccessor = new accessorlib.SQLiteAccessor(relations.tablename, true, { idAttribute: relations.idAttribute, autoIncrement: relations.autoIncrement });
    var newRelations = this.dataRender(data, relations, callback);
    var self = this;
    var idAttribute = relations.idAttribute;
    var context = { idAttribute: relations.idAttribute, newRelations: newRelations, data: data, callback: callback, dbAccessor: dbTransAccessor };//修改上下文
    //开启事务
    dbTransAccessor.transBegin();
    //修改主表数据
    dbTransAccessor.update(data, this.GetWhereOptions(relations, data), function (err, info) { self.updatedMainHandler(err, data[idAttribute], context); });
}
//3.删除
InnerDataAPI.prototype.delete = function (data, relations, callback) {
    var dataAccessor = new accessorlib.SQLiteAccessor(relations.tablename);
    var idAttribute = relations.idAttribute;
    var options = this.GetWhereOptions(relations, data);
    dataAccessor.delete(options, callback);
}
//4.查询
InnerDataAPI.prototype.query = function (data, relations, callback) {
    var dataAccessor = new accessorlib.SQLiteAccessor(relations.tablename);
    var queryParams = data || {};
    dataAccessor.select(queryParams, callback);
}
//5.主表新增完毕
InnerDataAPI.prototype.createdMainHandler = function (err, id, context) {
    if (err) {
        context.dbAccessor.rollback(function () { callback(err, context); });
    } else {
        context.data[context.idAttribute] = id;
        var self = this;
        async.eachSeries(context.newRelations, function (relation, nextCall) {
            self.createHandler(relation, context, id, nextCall);
        }, function (err) {
            var callback = context.callback;
            //如果失败 则回滚事务
            if (err) { context.dbAccessor.rollback(function () { callback(err, context); }); }
            //如果成功则提交事务
            context.dbAccessor.commit(function () { callback(null, context) });
        });
    }
}
//6.主表修改完毕
InnerDataAPI.prototype.updatedMainHandler = function (err, id, context) {
    var callback = context.callback;
    if (err) {
        context.dbAccessor.rollback(function () { callback(err, context); });
    } else {
        var self = this;
        async.eachSeries(context.newRelations, function (relation, nextCall) {
            self.cudHandler(relation, context, id, nextCall);
        }, function (err) {
            var dbAccessor = context.dbAccessor;
            //如果失败 则回滚事务
            if (err) { dbAccessor.rollback(function () { callback(err, context); }); }
            //如果成功则提交事务
            dbAccessor.commit(function () { callback(null, context) });
        });
    }
}
//7.子表新增数据实现
InnerDataAPI.prototype.createHandler = function (relation, context, mainid, nextCall) {
    var dbAccessor = context.dbAccessor;
    var addList = relation.addList;
    if (!typeQues.isArray(addList)) { nextCall(); }
    //切换数据连接表
    dbAccessor.changeTable(relation.tablename, relation.idAttribute, relation.autoIncrement);
    //开始批量新增数据
    async.eachSeries(addList, function (item, nextCall) {
        item[relation.fAttribute] = mainid;
        dbAccessor.insert(item, function (err, id) {
            item[relation.idAttribute] = id;
            nextCall(err, id);
        });
    }, function (err) {
        nextCall(err);
    });
}
//8.子表修改数据实现
InnerDataAPI.prototype.updateHandler = function (relation, context, id, nextCall) {
    var dbAccessor = context.dbAccessor;
    var modifyList = relation.modifyList;
    if (!typeQues.isArray(modifyList)) { nextCall(); }
    var self = this;
    //切换数据连接表
    dbAccessor.changeTable(relation.tablename, relation.idAttribute, relation.autoIncrement);
    //开始批量修改数据
    async.eachSeries(modifyList, function (item, nextCall) {
        dbAccessor.update(item, self.GetWhereOptions(relation, item), function (err) {
            nextCall(err, id);
        });
    }, function (err) {
        nextCall(err);
    });
}
//9.子表删除数据实现
InnerDataAPI.prototype.deleteHandler = function (relation, context, nextCall) {
    var dbAccessor = context.dbAccessor;
    var deleteList = relation.deleteList;
    if (!typeQues.isArray(deleteList)) { nextCall(); }
    var self = this;
    //切换数据连接表
    dbAccessor.changeTable(relation.tablename, relation.idAttribute, relation.autoIncrement);
    //开始删除子表数据
    async.eachSeries(deleteList, function (item, nextCall) {
        dbAccessor.delete(self.GetWhereOptions(relation, item), function (err) {
            nextCall(err, context);
        });
    }, function (err) {
        nextCall(err);
    });
}
//10.子表 增，删，改 统一操作
InnerDataAPI.prototype.cudHandler = function (relation, context, id, nextCallk) {
    //1.首先删除数据
    var handlers = [];
    var self = this;
    //1.添加删除操作
    handlers.push(function (next) { self.deleteHandler(relation, context, next); });
    //2.添加修改操作
    handlers.push(function (next) { self.updateHandler(relation, context, id, next); });
    //3.添加新增操作
    handlers.push(function (next) { self.createHandler(relation, context, id, next); });
    async.eachSeries(
        handlers, 
        function (handler, itemNextCall) {
            handler(itemNextCall);
        }, 
        function (err) {
            nextCallk(err, context);
            self = handlers = null;
        });
}
//根据关系列表从主表数据中取出对应的子表数据并且将对应的属性从主表数据中移除
InnerDataAPI.prototype.dataRender = function (data, relations, callback) {
    var child = null;
    var handlers = [];
    var children = util.Undef(relations.child, []);
    var main = {};
    for (var i = 0, k = children.length; i < k; i++) {
        child = children[i];
        if (child == null) {
            continue;
        }
        if (!this.validateRelation(child, callback)) {
            break;
        }
        var name = child.tablename;
        var item = data[name];
        if (typeQues.isObject(item)) {
            child.addList = item.addList;
            child.modifyList = item.modifyList;
            child.deleteList = item.deleteList;
            handlers.push(child);
        }
    }
    return handlers;
}
//根据relation获取where 表达式
InnerDataAPI.prototype.GetWhereOptions = function (relation, data) {
    var idAttribute = relation.idAttribute;
    var options = { where: [[idAttribute, "=", data[idAttribute]]] };
    return options;
}
//获取闭包操作函数
InnerDataAPI.prototype.GetCall = function (fn, arg1, argN) {
    var args = Array.prototype.splice(1);
    var self = this;
    return function () {
        var nArgs = Array.prototype.splice(0);
        args.push.apply(args, nArgs);
        if (typeQues.isFunction(fn)) {
            fn.apply(self, args);
        }
    }
}
//验证传入数据
InnerDataAPI.prototype.validate = function (command, dataObject, relations, callback) {
    var r = false;
    if (!typeQues.isObject(dataObject)) {
        callback(localize.restInvalidOperateString, null);
    }
    else if (strUtil.IsNullOrWhiteSpace(command)) {
        callback(localize.restCommandInvalidString, null);
    }
    else {
        r = this.validateRelation(relations, callback);
    }
    return r;
}
//验证单个关系
InnerDataAPI.prototype.validateRelation = function (relation, callback) {
    var r = false;
    if (!typeQues.isObject(relation)) {
        callback(localize.restRelationNullString, null);
    } else if (strUtil.IsNullOrWhiteSpace(relation.tablename)) {
        callback(localize.restRelationInvalidIdOrNameString, null);
    }
    else if (strUtil.IsNullOrWhiteSpace(relation.idAttribute)) {
        callback(localize.restRelationInvalidIdOrNameString, null);
    } else {
        r = true;
    }
    return r;
}

var innerDataAPI = new InnerDataAPI();

DataAPI.prototype.rest = function (command, dataObject, relations, callback) {
    return innerDataAPI.rest(command, dataObject, relations, callback);
}

module.exports = new DataAPI();