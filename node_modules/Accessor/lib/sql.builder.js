/******************************************************************************
 *  名称：SQLite 数据库操作语句生成工具 
 *  日期：2014-12-15
 *  描述：无
 *  作者：Beven
 *****************************************************************************/
var sqlstrutil = require('./sql.util.js'),
    framework = require('framework');

var InfoMessageStrings = framework.InfoMessageStrings;
//SQLite语句构建工具
function SQLiteSQLBuilder() { }

//公布实例
module.exports = new SQLiteSQLBuilder();

//类型检测工具
SQLiteSQLBuilder.prototype.checkQues = framework.CheckQuestion;
//创建新增SQL语句
SQLiteSQLBuilder.prototype.buildInsertSQL = function (dataObject, tablename, allowFields, idAttribute) {
    var columns = [];
    var parameters = [];
    var values = [];
    var strUtil = framework.String;
    for (var column in dataObject) {
        //如果传入主键 则忽略主键新增 即主键为 自增列
        if (idAttribute != null && strUtil.Equals(column, idAttribute, true)) { continue; }
        if (this.supportColumn(dataObject, column, allowFields)) {
            columns.push(column);
            values.push('?');
            parameters.push(dataObject[column]);
        }
    }
    if (columns.length == 0) {
        this.log(InfoMessageStrings.sqliteNoTableOrFieldsString);
        return { sql: "", parameters: [], err: InfoMessageStrings.sqliteNoTableOrFieldsString };
    }
    return { sql: strUtil.Format("INSERT INTO {0} ({1}) VALUES ({2});", tablename, columns.join(","), values.join(",")), parameters: parameters };
}
//创建修改语句
SQLiteSQLBuilder.prototype.buildSQLUpdateSQL = function (dataObject, tablename, allowFields, options, idAttribute) {
    var self = this;
    var modify = this.buildFieldValues(dataObject, allowFields, idAttribute);
    var condition = this.buildWheres(options);
    var parameters = modify.parameters || [];
    parameters = parameters.concat(condition.parameters);
    return { parameters: parameters, sql: framework.String.Format("UPDATE {0} SET {1} {2};", tablename, modify.express, condition.express) };
}
//创建删除语句
SQLiteSQLBuilder.prototype.buildDeleteSQL = function (tablename, options) {
    var context = this.buildWheres(options);
    return { parameters: context.parameters, sql: framework.String.Format("DELETE FROM {0} {1};", tablename, context.express) };
}
//创建查询语句
SQLiteSQLBuilder.prototype.buildSelectSQL = function (tablename, options) {
    options = options || {};
    var checkQues = this.checkQues;
    var condition = this.buildWheres(options);
    var fields = options.fields || [];
    var limit = options.limit;
    var offset = options.offset;
    var inject = fields.join('');
    if (inject.indexOf("`") > -1 || fields.length <= 0) {
        fields = null;
    }
    var field_express = checkQues.isArray(fields) ? ("`" + fields.join("`,`") + "`") : "*";
    var limit_express = (limit && parseInt(limit) > 0) ? " LIMIT " + parseInt(limit) : "";
    var offset_express = (offset && parseInt(offset) > 0) ? " OFFSET " + parseInt(offset) : "";
    var sql = framework.String.Format("SELECT {0} FROM {1} {2} {3} {4};", field_express, tablename, condition.express, limit_express, offset_express);
    return { parameters: condition.parameters, sql: sql };
}
//创建 Where 从句 options:{where:[["id",">",1]," id=1 "]}
SQLiteSQLBuilder.prototype.buildWheres = function (options) {
    options = options || {};
    var sqlSegments = [];
    var parameters = [];
    var checkQues = this.checkQues;
    var where = options.where;
    if (checkQues.isArray(where) && where.length > 0) {
        sqlSegments.push(" WHERE");
        where.map(function (value) {
            if (checkQues.isArray(value)) {
                if (value.length === 3) {
                    sqlSegments.push(" `" + value[0] + "` " + value[1] + "?");
                    parameters.push(value[2]);
                }
            }
        });
    }
    return { express: sqlSegments.join(''), parameters: parameters };
}
//创建SQL字段赋值语句
SQLiteSQLBuilder.prototype.buildFieldValues = function (dataObject, allowFields, idAttribute) {
    var settings = [];
    var parameters = [];
    var fields = allowFields;
    var strUtil = framework.String;
    var escape = sqlstrutil.escape;
    for (var key in dataObject) {
        if (this.supportColumn(dataObject, key, allowFields)) {
            //如果传入主键 则忽略主键修改 即主键为 自增列
            if (idAttribute != null && strUtil.Equals(key, idAttribute, true)) { continue; }
            settings.push("`" + key + "` = ?");
            parameters.push(dataObject[key]);
        }
    }
    return { express: settings.join(','), parameters: parameters };
}
//检验指定列是否合法
SQLiteSQLBuilder.prototype.supportColumn = function (dataObject, field, allowFields) {
    if (!dataObject.hasOwnProperty(field)) {
        return false;
    }
    else if (allowFields.indexOf(field) === -1) {
        this.log(field + InfoMessageStrings.sqliteIngoreFieldsString);
        return false;
    } else {
        return true;
    }
}
//根据不同值类型返回对应的SQL字符串表示形式
SQLiteSQLBuilder.prototype.valueSQLRender = function (v) {
    if (this.checkQues.isNumber(v)) {
        return v;
    } else {
        return "'" + v + "'";
    }
}
//SQL值编码
SQLiteSQLBuilder.prototype.escape = function (v) {
    return sqlstrutil.escape(v);
}
//返回指定对象的keys
SQLiteSQLBuilder.prototype.keys = function (obj) {
    if (Object.keys) {
        return Object.keys(obj);
    } else {
        var keys = [];
        for (var key in obj) {
            keys.push(key);
        }
        return keys;
    }
}
//输出日志
SQLiteSQLBuilder.prototype.log = function (message) {
    if (message) {
        framework.Logger.Info(message);
    }
}