/***************************************************
 * 名称：Webpos2.0代码生成工具
 * 日期：2014-12-15
 * 描述：主要用于生成Model,ModelCollection,View以及Validator配置等文件
 * 作者：Beven
 **************************************************/
var SQLiteAccessor = require('Accessor').SQLiteAccessor;
var PathUtil = require('path');
var StrUtil = require('../lib/string.js');
var TypeQues = require('../lib/check.js');
var GenContext = require('./context.js');
var DateUtil = require('../lib/date.js');
var BaseCodeGener = function () { this.Init(); }

var GENERS = [];

/*
 * 名称：代码生成 这里主要是生成已经注册生成器的生成方法
 * 参数(table)：数据库表名称
 * 参数(callback)：生成完毕后的回调函数
 */
BaseCodeGener.prototype.CodeGen = function (table, callback) {
    var context = new GenContext(table, callback);
    context.BaseDIR = PathUtil.join(__dirname, '..', '..', 'business');
    context.Version = DateUtil.Format((new Date), "yyyyMMdd");
    this.ReadyColumns(context);
}
/*
 * 名称：初始化生成器
 */
BaseCodeGener.prototype.Init = function () {
    GENERS.length = 0;
    GENERS.push(require('./model.gen.js'));
    GENERS.push(require('./validate.gen.js'));
    GENERS.push(require('./collection.gen.js'));
    GENERS.push(require('./view.gen.js'));
}
/*
 * 名称：获取指定表的元数据信息
 * 参数(context)：代码生成上下文
 */
BaseCodeGener.prototype.ReadyColumns = function (context) {
    var accessor = new SQLiteAccessor(context.TableName);
    var self = this;
    accessor.query(StrUtil.Format("PRAGMA table_info(`{0}`);", context.TableName), function (err, data) {
        self.ReadyColumnsFinal(err, data, context);
    });
}
/*
 * 名称：获取指定表的元数据完毕
 * 参数(err)：获取列信息错误信息
 * 参数(data)：数据库表对应的列信息
 * 参数(context)：代码生成上下文
 */
BaseCodeGener.prototype.ReadyColumnsFinal = function (err, data, context) {
    if (err) {
        return context.Final(err, context);
    }
    context.Columns = data;
    this.Gening(context);
}
/*
 * 名称：开始启动生成
 * 参数(context)：代码生成上下文
 */
BaseCodeGener.prototype.Gening = function (context) {
    this.Call(this.OnStaring, context);
    var geners = GENERS;
    for (var i = 0, k = geners.length; i < k; i++) {
        geners[i].CodeGen(context);
    }
    this.Gened(context);
}
/*
 * 名称：生成完毕
 * 参数(context)：代码生成上下文
 */
BaseCodeGener.prototype.Gened = function (context) {
    this.Call(this.OnGened, context);
    context.Final(context.Error, context);
}
/*
 * 名称：开始生成事件
 * 参数(context)：代码生成上下文
 */
BaseCodeGener.prototype.OnStaring = function (context) {
    console.log("start gen...");
}
/*
 * 名称：生成完毕事件
 * 参数(context)：代码生成上下文
 */
BaseCodeGener.prototype.OnGened = function (context) {
    console.log("gen all finish!");
}
//安全执行传入函数
BaseCodeGener.prototype.Call = function (fn, arg1, arg2) {
    if (TypeQues.isFunction(fn)) {
        var args = Array.prototype.splice.call(arguments, 1);
        return fn.apply(this, args);
    }
}

module.exports = new BaseCodeGener();