/*********************************************************
 * 名称：封装了一些无分类的通用方法
 * 日期：2014-11-22
 * 描述：无
 * 作者：Beven
 * *******************************************************/
var Utils = function () { }
var strUtil = require('./string.js');
var typeQues = require('./check.js');

module.exports = new Utils();
/*
 * 名称：1.将传入值v如果在为null或者空字符串或者空格字符串 情况下 替换值为dv
 * 参数(v)：是否为空或者空字符串的值
 * 参数(dv)：在v为空或者空字符串时 替代的默认值
 */
Utils.prototype.Undef = function (v, dv) {
    if (strUtil.IsNullOrWhiteSpace(v)) {
        return dv;
    } else {
        return v;
    }
}
/*
 * 名称：2.始终返回一个数组 如果传入参数是数组则直接返回 否则将不为null的传入参数作为新数据的项进行返回
 * 参数(itemOrArray)：数组或者非数组变量
 */
Utils.prototype.EnsureArray = function (itemOrArray) {
    if (typeQues.isArray(itemOrArray)) {
        return itemOrArray;
    } else if (itemOrArray != null) {
        return [itemOrArray];
    } else {
        return [];
    }
}
/*
 * 名称：返回一个对象的属性keys
 * 参数(obj)：对象
 */
Utils.prototype.GetKeys = function (obj) {
    if (Object.keys) {
        return Object.keys(obj);
    } else {
        var keys = [];
        for (var i in obj) {
            keys.push(i);
        }
        return keys;
    }
}
