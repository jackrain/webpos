/******************************************************************************
 *  针对于node提供的http方法进行封装
 *****************************************************************************/
var http = require('http'),
    util = require('util'),
    url = require('url'),
    fs = require('fs'),
    basename=require('path').basename,
    framework = require('framework');

var HttpPost=function(){var c = this.checkQuestion = framework.CheckQuestion;};

HttpPost.prototype.init=function(href,callback){
}
/**
 * author by skyzhou 20141128
 *参数说明：url 完整的路径
 *          dir 需要下载的目录
 *          process 回掉函数下载中
 *          complete 回掉函数下载完成
 *下载url中的文件到指定的目录中去
 */
HttpPost.prototype.downloaddata=function(url,dir,complete,process){
    var self=this;
    self.DOWNLOAD_DIR = dir;
    self.file_name=basename(url);
    self.file = fs.createWriteStream('../'+self.DOWNLOAD_DIR+'/'+ self.file_name);
    http.get(url, function(res) {
        self.contentlength=parseInt(res.headers["content-length"]);
        self.percent=0;
        self.dlenth=0;
        res.on('data', function(data) {
            self.file.write(data);
            self.dlenth=data.length+self.dlenth;
            self.percent=self.dlenth/self.contentlength;
            //console.log(self.percent);
            if(self.checkQuestion.isFunction(process)){
                process(self.percent);
            }
        }).on('error',function(err){
            console.log('error');
        }).on('end', function() {
            self.file.end();
            if(self.checkQuestion.isFunction(process)){
                complete(self.file.path);
            }
        });
    });
}
/**
 *
 */
HttpPost.prototype.post=function(url,data,callback){
    var self=this;
    self.data=querystring.stringify(data);
    self.options = self.url.parse(url);
    self.options.headers={
        'Content-Length':self.data.length
    };
    self.req = http.request(self.options, function(res) {
        console.log('STATUS: ' + res.statusCode);
        console.log('HEADERS: ' + JSON.stringify(res.headers));
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            console.log('BODY: ' + chunk);
        });
    });
    self.req.on('error', function(e) {
        console.log('problem with request: ' + e.message);
    });

// write data to request body
    self.req.write(self.data);
    self.req.end();
}
/**
 *
 */
Http.prototype.rest=function(){

}

/**
 * author by skyzhou 20141202
 * @param p
 * @param opts
 * @param f
 * @param made
 */
HttpPost.prototype. mkdirP=function (p, opts, f, made) {
    if (typeof opts === 'function') {
        f = opts;
        opts = {};
    }
    else if (!opts || typeof opts !== 'object') {
        opts = { mode: opts };
    }

    var mode = opts.mode;
    var xfs = opts.fs || fs;

    if (mode === undefined) {
        mode = 0777 & (~process.umask());
    }
    if (!made) made = null;

    var cb = f || function () {};
    p = path.resolve(p);

    xfs.mkdir(p, mode, function (er) {
        if (!er) {
            made = made || p;
            return cb(null, made);
        }
        switch (er.code) {
            case 'ENOENT':
                self.mkdirP(path.dirname(p), opts, function (er, made) {
                    if (er) cb(er, made);
                    else self.mkdirP(p, opts, cb, made);
                });
                break;

            default:
                xfs.stat(p, function (er2, stat) {
                    // if the stat fails, then that's super weird.
                    // let the original error be the failure reason.
                    if (er2 || !stat.isDirectory()) cb(er, made)
                    else cb(null, made);
                });
                break;
        }
    });
};




//私有的
var  post=null;

/****************公布公共调用方法：***************************/
function httppost(){post=new HttpPost()};
httppost.prototype.downloaddata=function (url,dir,process,complete){
    return post.downloaddata(url,dir,process,complete);
};
httppost.prototype.mkdirP=function (dir,opts,f,made){
    return post.mkdirP(dir,opts,f,made);
};

module.exports.httpost =httppost;

