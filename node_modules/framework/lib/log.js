/*************************************************************
 * 基于log4js-node的日志
 * 
 * 
 * **************************************************************/
var log4js = require('log4js-node');
var path = require('path');
var io = require('fs-extra');
var log = require('util').log;
var check = require('./check.js');
var date = require('./date.js');

//全局日志对象
var infoLogger = null;
var errorLogger = null;
var debugLogger = null;

var LogUtil = function (options, rootDIR) { init(options, rootDIR); }

module.exports = LogUtil;

//是否在写出日志的时候同时写出控制台
LogUtil.prototype.WithsConsole = true;

//输入调试日志
LogUtil.prototype.Debug = function (message) {
    debugLogger.debug(message);
    this.OutConsole(message);
}

//输出错误日志
LogUtil.prototype.Error = function (err) {
    errorLogger.error(err);
    this.OutConsole(err);
}

//输出信息日志
LogUtil.prototype.Info = function (infoMessage) {
    infoLogger.info(infoMessage);
    this.OutConsole(infoMessage);
}

//如果控制台日志输出(WithsConsole)设置为true 则会输出日志到控制台
LogUtil.prototype.OutConsole = function (message) {
    if (this.WithsConsole) {
        log(message);
    }
}

//初始化log4js配置
function init(options, rootDIR) {
    initAppenders(options, rootDIR);
    log4js.configure(options);
    debugLogger = log4js.getLogger('debug');
    infoLogger = log4js.getLogger('info');
    errorLogger = log4js.getLogger('error');
}

//初始化log4js配置
function initAppenders(options, rootDIR) {
    if (options) {
        var appenders = options.appenders;
        if (check.isArray(appenders)) {
            var appender = null;
            for (var i = 0, k = appenders.length; i < k; i++) {
                appender = appenders[i];
                initAppender(appender, rootDIR);
            }
        }
    }
}

//初始化log4js appender对象 并且自动创建对应的目录
function initAppender(appender, rootDIR) {
    if (appender) {
        var dir = appender.filename;
        //如果没有使用绝对路径
        if (dir.indexOf(":\\") < 0 && !check.isEmpty(rootDIR)) {
            dir = path.join(rootDIR, dir);
        }
        io.ensureDirSync(dir);
    }
}
