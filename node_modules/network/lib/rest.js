/**************************************************
 * 用于请求服务器的rest接口
 *
 **************************************************/
var httppost=require('./post.js'),
     framework = require('framework'),
     querystring = require('querystring'),
     crypto = require('crypto');
var  log4js = require('log4js-node');

var restobj = function () {
    var c = this.checkQuestion = framework.CheckQuestion;
    log4js.configure(framework.Configuration.log4jsCfg);
    this.logger = log4js.getLogger('');
}

module.exports = new restobj();
/**
 * 在使用rest接口前，需要对其进行初始化
 * @param url   rest地址
 * @param username  用户名
 * @param password  密码
 * @callback callback 回掉函数
 */
restobj.prototype.init=function(url,username,password,callback){
    var self=this;
    self._serverurl=url;
    self._username=username;
    self._password=password;
    if(self.checkQuestion.isFunction(process)){
        callback();
    }
}
/**
 * 调用rest查询接口
 * @param table 表名(可以使用表名，也可以使用id)
 * @param columns   需要的查询的字段
 * @param qlcid     是否通过查询配置读取
 * @param params    查询过滤条件
 * @param additional   补充字段结构{strat,range,count,orderby}
 * @param callback  查询成功后的回掉函数
 */
restobj.prototype.Query=function(table,columns,qlcid,params,additional,callback){
    var self=this;
    if(additional)
    {
        self.start=parseInt(additional["strat"]);
        self.range=parseInt(additional["range"]);
        self.count=parseInt(additional["count"]);
        self.orderby=additional["orderby"];
    }
    self.params={
        "table":table,
        "columns":columns,
        "qlcid":qlcid,
        "params":params,
        "start":self.start,
        "range":self.range,
        "count":self.count,
        "orderby":self.orderby
    };
    self.trans={"id":1,"command":"QUERY","params":params};
    self.logger.debug(self.trans);
    self.sendrequest(self.trans,callback);
}
/**
 * 处理单据，同时创建头表和明细表
 * @param masterobj 创建表头记录
 * @param detailobjs  创建明细表记录
 * @param pre_actions webaction.id定义在操作前的行为
 * @param post_actions  连续动作，在增删改调整后的动作
 * @param submit    是否提交，true,最后执行提交
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ProcessOrder=function(masterobj,detailobjs,pre_actions,post_actions,submit,callback){
    var self=this;
    self.params={"masterobj":masterobj,"detailobjs":detailobj,"pre_actions":pre_actions,"post_actions":post_actions,"submit":submit};
    self.trans={"id":1,"command":"ProcessOrder","params":self.params};
    self.logger.debug(self.trans);
}
/**
 * 执行bos中AD_SQL中的语句
 * @param name 名称
 * @param values   需要传入sql中的参数
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ExecuteSQL=function(name,values,callback){
    var self=this;
    self.params={"name":name,"values":values};
    self.trans={"id":1,"command":"ExecuteSQL","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 单对象创建
 * @param table 表
 * @param columns   字段
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ObjectCreate=function(table,columns,callback) {
    var self=this;
    self.columns_value=JSON.stringify(columns);
    self.columns_value=self.columns_value.substring(1,self.columns_value.length-1);
    self.params="{"+"'table'"+":"+table+","+self.columns_value+"}";
    self.params=eval("(" +self.params+ ")");
    self.trans={"id":1,"command":"ObectCreate","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 单对象修改
 * @param table  表
 * @param id    记录id
 * @param columns   字段
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ObjectModify=function(table,id,columns,callback){
    var self=this;
    self.columns_value=JSON.stringify(columns);
    self.columns_value=self.columns_value.substring(1,self.columns_value.length-1);
    self.params="{"+"'table'"+":"+table+","+self.columns_value+",'id':"+id+"}";
    self.params=eval("(" +self.params+ ")");
    self.trans={"id":1,"command":"ObectCreate","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 删除已经存在的记录，系统自动维护诸如级联删除等的行为
 * @param table 表
 * @param id    记录id
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ObjectDelete=function(table,id,callback){
    var self=this;
    self.params={"table":table,"id":id}
    self.trans={"id":1,"command":"ObjectDelete","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 提交单据，在系统中有提交按钮的任何表
 * @param table 表
 * @param id    记录id
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ObjectSubmit=function(table,id,callback){
    var self=this;
    self.params={"table":table,"id":id};
    self.trans={"id":1,"command":"ObjectSubmit","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 执行系统单对象界面的定制按钮动作，如网络订单上的付款按钮
 * @param webaction 动作定义名称
 * @param id    动作定义id
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ExecuteWebAction=function(webaction,id,callback){
    var self=this;
    self.params={"webaction":webaction,"id":id};
    self.trans={"id":1,"command":"ExecuteWebAction","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}

restobj.prototype.ObjectUnsubmit=function(table,id,callback){
    var self=this;
    self.params={"table":table,"id":id};
    self.trans={"id":1,"command":"ObjectSubmit","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 批量导入，操作时，运行部分行导入不成功，将提示用户导入失败的行。批量导入的每一行记录的事务是独立的。
 * @param table 表的ID或名称
 * @param unique_constraint “yes”|”no”， 在插入行时，若遇到唯一索引出错，是否改插入为更新，默认为”no”
 * @param columns   数组，数组长度即为准备导入的记录数。字段的名称同ObjectCreate。数组元素的类型参见不同字段的定义
 * @param callback
 * @constructor  有错误的行的信息构造的数组，每个元素为下面的对象内容
 *      结构：errors{}[] 有错误的行的信息构造的数组，每个元素为下面的对象内容
 *            lineno    出错行的行号，第一行的行号为1
 *            errmsg    出错原因
 */
restobj.prototype.Import=function(table,unique_constraint,columns,callback){
    var self=this;
    self.columns_value=JSON.stringify(columns);
    self.columns_value=self.columns_value.substring(1,self.columns_value.length-1);
    self.params="{"+"'table'"+":"+table+","+self.columns_value+",'update_on_unique_constraints':"+unique_constraint+"}";
    self.params=eval("(" +self.params+ ")");
    self.trans={"id":1,"command":"Import","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 获取一个对象的信息，包括头和明细，即标签页的内容。对应UI即是单对象界面
 * @param table 对应表的ID或名称
 * @param id    要操作的记录的ID，对于不知道ID的情况，可以通过 "ak"，“id_find”搜索
 * @param reftables 可选，通过数组来指明需要哪些标签页的内容，每个元素都是关联表的id
 * @param callback
 * @constructor
 */
restobj.prototype.GetObject=function(table,id,reftables,callback){
    var self=this;
    self.params={"table":table,"id":id,"reftables":reftables};
    self.trans={"id":1,"command":"Import","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 此命令能将本文其他命令打包执行，但是作为一个事务。
 * @param transactions  每个元素都是一个命令，如ObjectCreate, ObjectModify等，任何一个执行失败都将导致全部回滚。
 * @constructor
 */
restobj.prototype.ExecuteBatch=function(transactions,callback){
    self.trans={"id":1,"command":"ExecuteBatch","params":transactions};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}
/**
 * 执行工作流实例的批准、驳回或指派，要求当前操作人必须有相应审核权限
 * @param table 对应表的ID或名称
 * @param id    要操作的记录的ID
 * @param auditaction   可选值："accept", "reject", "assign", "cancel_assign"，分别代表：批准，驳回，指派，取消指派
 * @param comments  审核意见
 * @param assignee  users 表的name字段值，指派用户, 在auditaction= assign的时候必须设置
 * @param callback  回掉函数
 * @constructor
 */
restobj.prototype.ExecuteAudit=function(table,id,auditaction,comments,assignee,callback){
    var self=this;
    self.params={"table":table,"id":id,"auditaction":auditaction,"comments":comments,"assignee":assignee,"nds.control.ejb.UserTransaction":"N"};
    self.trans={"id":1,"command":"Import","params":self.params};
    self.logger.debug(self.trans);
    this.sendrequest(self.trans,callback);
}

/**
 * author by skyzhou
 * @param trans 业务参数
 * @param callback 回掉函数
 */
restobj.prototype.sendrequest=function(trans,callback){
    var self=this;
    self.date=new Date();
    //获取当前时间并格式化
    self.date=framework.Date.Format(self.date,'yyyy-MM-dd h:m:s.S');
    var sing=self._username+self.date+crypto.createHash('md5').update(self._password).digest('hex');
    var sip_sign= crypto.createHash('md5').update(sing).digest('hex');
    self.data="";
    self.data= "appSecret="+crypto.createHash('md5').update(self._password).digest('hex');
    self.data= self.data +"&sip_timestamp="+self.date,
    self.data= self.data + "&sip_appkey="+self._username,
    self.data= self.data + "&sip_sign="+sip_sign,
    self.data= self.data + "&transactions=["+JSON.stringify(trans)+"]";
    //console.log(self.data);
    httppost.post(self._serverurl,self.data,callback);
};