var StringUtil = function () { }

module.exports = new StringUtil();

//1.简单字符串格式化工具
StringUtil.prototype.Format = function (str, arg1, arg2, argN) {
    if (str) {
        var args = Array.prototype.slice.call(arguments, 1);
        str = str.replace(/\{\d+\}/g, function (a) {
            var s = args[a.slice(1, a.length - 1)];
            return s == null?a:s;
        });
    }
    return str;
}

StringUtil.prototype.Format2 = function (str, args) { 
    if (str) {
        str = str.replace(/\{\d+\}/g, function (a) {
            var s = args[a.slice(1, a.length - 1)];
            return s == null?a:s;
        });
    }
    return str;
}

//2.字符串检测： 是否以xx开头 s:原始字符串 s2:包含字符串 ignoreCase:是否忽略大小写
StringUtil.prototype.StartsWidth = function (s, s2, ignoreCase) {
    if (s == null || s2 == null || s2 == '') {
        return false;
    } else if (ignoreCase) {
        return s.substring(0, s2.length).toLowerCase() == s2.toLowerCase();
    } else {
        return s.substring(0, s2.length) == s2;
    }
}

//3.字符串检测：是否以XX结尾  s:原始字符串 s2:包含字符串 ignoreCase:是否忽略大小写
StringUtil.prototype.EndsWidth = function (s, s2, ignoreCase) {
    if (s == null || s2 == null || s2 == '') {
        return false;
    } else if (ignoreCase) {
        return s.substring(s.length - s2.length).toLowerCase() == s2.toLowerCase();
    } else {
        return s.substring(s.length - s2.length) == s2;
    }
}

//4. 去掉字符串开始的指定字符串
StringUtil.prototype.TrimStart = function (s, trim, ignoreCase) {
    if (this.StartsWidth(s, trim, ignoreCase)) {
        return s.substring(trim.length);
    } else {
        return s;
    }
}

//5.去掉字符串末尾指定字符串
StringUtil.prototype.TrimEnd = function (s, trim, ignoreCase) {
    if (this.EndsWidth(s, trim, ignoreCase)) {
        return s.substring(0, s.length - trim.length);
    } else {
        return s;
    }
}

//6.判断指定字符串是否为null或者为空字符串
StringUtil.prototype.IsNullOrEmpty = function (s) {
    return !(s != null && s != '');
}

//7.判断指定值是否为null或者为 包含空格的字符串
StringUtil.prototype.IsNullOrWhiteSpace = function (s) {
    if (this.IsNullOrEmpty(s)) {
        return true;
    } else {
        return this.TrimAll(s.toString()) == '';
    }
}

//8.却掉指定字符串的所有空格
StringUtil.prototype.TrimAll = function (s) {
    if (s) {
        return s.replace(/\s+/g, '');
    } else {
        return '';
    }
}

//9.去掉字符串左边空格
StringUtil.prototype.TrimLeft = function (s) {
    if (s) {
        return s.replace(/^\s+/g, '');
    } else {
        return '';
    }
}

//10.去掉字符串左边空格
StringUtil.prototype.TrimRight = function (s) {
    if (s) {
        return s.replace(/\s%/g, '');
    } else {
        return '';
    }
}

//11.去掉字符串左右两边的空格
StringUtil.prototype.Trim = function (s) {
    if (s) {
        return this.TrimRight(this.TrimLeft(s));
    } else {
        return '';
    }
}

//12比较连个字符串是否相等 a:字符串1 b字符串2 ignore:是否忽略大小写
StringUtil.prototype.Equals = function (a, b, ignore) {
    if (ignore == true) {
        return (a || '').toString().toLocaleLowerCase() == (b || '').toString().toLocaleLowerCase();
    } else {
        return a == b;
    }
}

//13 如果传入字符串为空或者多个空格则将值替换成指定值
StringUtil.prototype.Undef = function (v, dv) {
    if (this.IsNullOrWhiteSpace(v)) {
        return dv;
    } else {
        return v;
    }
}

//14.判断传入值是否为String类型
StringUtil.prototype.IsString = function (v) {
    return Object.prototype.toString.apply(v) == "[object String]";
}
