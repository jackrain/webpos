/***************************************************
 * 名称：Javascript Date类型通用操作方法扩展
 * 日期：2014-12-15
 * 描述：提供相关时间操作函数
 * 作者：Beven
 * ************************************************/
var typeQues = require('./check.js');
/*
 * 名称：时间辅助函数操作函数类
 */
var DateUtil = function () { }
//模块公布
module.exports = new DateUtil();
/*
 *名称(date)：将指定时间转换成指定格式的字符串格式 
 *格式单位(fmt)
 */
DateUtil.prototype.Format = function (date, fmt) {
    var o = {
        "M+": date.getMonth() + 1, //月份 
        "d+": date.getDate(), //日 
        "h+": date.getHours(), //小时 
        "m+": date.getMinutes(), //分 
        "s+": date.getSeconds(), //秒 
        "q+": Math.floor((date.getMonth() + 3) / 3),//季度 
        "S": date.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}
/*
 * 名称：判断传入值是否为Date数据类型
 * 参数(date):待判断的值
 */
DateUtil.prototype.IsDate = function (date) {
    return typeQues.isDate(date);
}
/*
 * 名称：时间转换函数
 * 参数1：maybe. 时间类型，或者时间类型字符串，或者毫秒数字
*/
DateUtil.prototype.DateConvert = function (maybe) {
    if (this.IsDate(maybe)) {
        return maybe;
    } else if (typeQues.isString(maybe)) {
        maybe = maybe.replace(/-/g, '/');
        var timers = Date.parse(maybe);
        return new Date(timers);
    } else {
        return new Date(maybe);
    }
}
/*
 * 名称：计算两个时间之间的差值
 * 参数1：dtStart. 开始日期 可以是一个时间类型或者一个时间格式的字符串
 * 参数2：dtEnd.   开始日期 可以是一个时间类型或者一个时间格式的字符串
 * 参数3：unit     单位： ss(毫秒) s(秒) mi(分) h(小时) d(天) m(月) y(年)
*/
DateUtil.prototype.DateDiff = function (dtStart, dtEnd, unit) {
    dtStart = this.DateConvert(dtStart);
    dtEnd = this.DateConvert(dtEnd);
    var v = 0;
    switch (unit) {
        case 'ss':
            v = dtEnd.getTime() - dtStart.getTime();
            break;
        case 's':
            v = (dtEnd.getTime() - dtStart.getTime()) / 1000;
            break;
        case 'mi':
            v = (dtEnd.getTime() - dtStart.getTime()) / 60000;
            break;
        case 'h':
            v = (dtEnd.getTime() - dtStart.getTime()) / 3600000;
            break;
        case 'd':
            v = (dtEnd.getTime() - dtStart.getTime()) / 86400000;
            break;
        case 'm':
            v = ((dtEnd.getMonth() + 1) + (dtEnd.getFullYear() - dtStart.getFullYear()) * 12) - (dtStart.getMonth() + 1);
            break;
        case 'y':
            v = (dtEnd.getFullYear() - dtStart.getFullYear());
        default:
            v = 0;
            break;
    }
    return parseInt(v);
}
/*
 * 名称：增加添加指定单位的时间值
 * 参数1：dt   日期 可以是一个时间类型或者一个时间格式的字符串
 * 参数2：num  时间隔值
 * 参数3：unit 时间间隔单位： ss(毫秒) s(秒) mi(分) h(小时) d(天) m(月) y(年)
*/
DateUtil.prototype.DateAdd = function (dt, num, unit) {
    dt = this.DateConvert(dt);
    switch (unit) {
        case 'ss':
            return new Date(dt.getTime() + num);
        case 's':
            return new Date(dt.getTime() + num * 1000);
        case 'mi':
            return new Date(dt.getTime() + num * 60000);
        case 'h':
            return new Date(dt.getTime() + num * 3600000);
        case 'd':
            return new Date(dt.getTime() + num * 86400000);
        case 'm':
            return new Date(dt.getFullYear(), (dt.getMonth() + num), dt.getDate(), dt.getHours(), dt.getSeconds(), dt.getMilliseconds());
        case 'y':
            return new Date(dt.getFullYear() + num, dt.getMonth(), dt.getDate(), dt.getHours(), dt.getSeconds(), dt.getMilliseconds());
        default:
            return dt;
            break;
    }
}
/*
 * 名称：给指定时间累加毫秒
 * 参数(dt)：待累加毫秒的时间类型数据(可以是时间类型数据或者时间格式的字符串)
 * 参数(milliSeconds)：累加毫秒
 */
DateUtil.prototype.AddMilliseconds = function (dt, milliSeconds) {
    return this.DateAdd(dt, milliSeconds, 'ss');
}
/*
 * 名称：给指定时间累加秒
 * 参数(dt):待累加秒的时间
 * 参数(seconds):累加秒
 */
 DateUtil.prototype.AddSeconds = function (dt, seconds) {
    return this.DateAdd(dt, seconds, 's');
}
/*
 * 名称：给指定时间累加分钟
 * 参数(dt):待累加分钟的时间(可以是时间类型数据或者时间格式的字符串)
 * 参数(minutes):累加分钟
 */
 DateUtil.prototype.AddMinutes = function (dt, minutes) {
    return this.DateAdd(dt, minutes, 'mi');
}
/*
 * 名称：给指定时间累加小时
 * 参数(dt):待累加小时的时间(可以是时间类型数据或者时间格式的字符串)
 * 参数(hours):累加小时
 */
 DateUtil.prototype.AddHours = function (dt, hours) {
    return this.DateAdd(dt, hours, 'h');
}
/*
 * 名称：给指定时间累加天数
 * 参数(dt):待累加天数的时间(可以是时间类型数据或者时间格式的字符串)
 * 参数(days):累加天数
 */
 DateUtil.prototype.AddDays = function (dt, days) {
    return this.DateAdd(dt, days, 'd');
}
/*
 * 名称：给指定时间累加月
 * 参数(dt):待累加月的时间(可以是时间类型数据或者时间格式的字符串)
 * 参数(months):累加月
 */
 DateUtil.prototype.AddMonths = function (dt, months) {
    return this.DateAdd(dt, months, 'm');
}
/*
 * 名称：给指定时间累加年
 * 参数(dt):待累加年的时间(可以是时间类型数据或者时间格式的字符串)
 * 参数(years):累加年
 */
 DateUtil.prototype.AddYears = function (dt, years) {
    return this.DateAdd(dt, years, 'y');
}
/*
 * 名称：获取当前日期所在月的最大天数
 * 参数(dt):时间类型或者可以是一个时间格式的字符串
 */
DateUtil.prototype.MaxDayOfMonth = function (dt) {
    dt = this.DateConvert(dt);
    var dt2 = this.AddMonths(dt, 1);
    return this.DateDiff(dt, dt2, 'd');
}
/*
 * 名称：获取当前传入时间天所在汉字星期值
 * 参数(dt)：传入时间类型或者时间类型格式的字符串
 */
DateUtil.prototype.DayOfWeek = function (dt) {
    dt = this.DateConvert(dt);
    var week = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
    return week[dt.getDay()];
}
/*
 * 名称：克隆传入时间
 * 参数(dt)：时间类型变量或者时间格式的字符串
 */
DateUtil.prototype.Clone = function (dt) {
    dt = this.DateConvert(dt);
    return new Date(dt.getTime());
}
/*
 * 名称：获取当前传入时间的单位部分值
 * 参数(dt)：时间类型或者时间类型格式字符串
 * 参数(part)： 时间间隔单位： ss(毫秒) s(秒) mi(分) h(小时) d(天) m(月) y(年) w(星期值)
 */
DateUtil.prototype.DatePart = function (dt, part) {
    dt = this.DateConvert(dt);
    switch (part) {
        case 'ss':
            return dt.getMilliseconds();
        case 's':
            return dt.getSeconds();
        case 'mi':
            return dt.getMinutes();
        case 'h':
            return dt.getHours();
        case 'd':
            return dt.getDate();
        case 'm':
            return dt.getMonth() + 1;
        case 'y':
            return dt.getFullYear();
        case 'w':
            return dt.getDay();
        default:
            return null;
            break;
    }
}
/*
 * 名称：获取当前日期所在年的第多少天
 * 参数(dt)：时间类型或者为时间类型格式的字符串
 */
DateUtil.prototype.DaysInYear = function (dt) {
    dt = this.DateConvert(dt);
    dtFirst = new Date(dt.getFullYear(), 0, 0, 0, 0, 0);
    return this.DateDiff(dtFirst, dt, 'd');
}
/*
 * 名称：获取当前日期所在年的第几周 
 * 参数(dt)：时间类型或者为时间类型格式的字符串
 */
DateUtil.prototype.WeeksInYears = function (dt) {
    dt = this.DateConvert(dt);
    dtFirst = new Date(dt.getFullYear(), 0, 0, 0, 0, 0);
    var week = dtFirst.getDay();
    week = week == 0?7:week;
    dtFirst = this.AddDays(dtFirst, 7 - week);
    var days = this.DateDiff(dtFirst, dt, 'd');
    var weeks = parseInt(days / 7);
    if (days % 7 != 0) {
        weeks = weeks + 1;
    }
    return weeks + 1;
}