/*********************************************************
 * 名称：扩展一般验证校验器
 * 日期：2014-12-15
 * 描述：包含校验器工厂(ModuleValidatorFactory) 与校验器(ModuleValidator) 
 *       可以使用(ModuleValidatorFactory).CreateValidator自行扩展校验器
 * 作者：Beven
 * *******************************************************/
var typeQues = require('./check.js');
var strUtil = require('./string.js');
var myUtil = require('./util.js');
var localize = require('./locale/localize.js');
var errBuilder = require('./exception.js');
var localization = require('./locale/localize.js');
var strUtil = require('./string.js');
var typeQues = require('./check.js');
var messages = localization.validateMessages;

//校验器工厂
var ModuleValidatorFactory = function () { }
//校验器
var ModuleValidator = function (name, fn, message, env) { Init.apply(this, arguments); }
var DEFAULT = new ModuleValidator();
var ENV = { OnlyBack: 2, OnlyForm: 1, Both: 0 };
//已实现的校验器键值表
var validators = {}
var Factory = new ModuleValidatorFactory();

module.exports = Factory;

//校验环境
ModuleValidatorFactory.prototype.Env = ENV;
//是否在调试模式 调试模式下 如果重复添加相同名称的校验器会抛出异常
ModuleValidatorFactory.prototype.Debug = true;
/*
 * 名称：创建一个校验器
 * 参数(name)：名称
 * 参数(message)：错误消息
 * 参数(fn)：校验函数
 * 参数(env)：校验环境 默认(0)前台后台都可以校验 1:仅在前台 2:仅在后台
 */
ModuleValidatorFactory.prototype.CreateValidator = function (name, message, fn, env) {
    if (this.Contains(name) && this.Debug) {
        throw errBuilder.Error(9000, name);
    }
    if (typeQues.isFunction(env)) {
        var n = fn;
        fn = env;
        fn = n;
    }
    validators[name] = new ModuleValidator(name, fn, message, (env || 0));
}
/*
 * 名称：判断是否已经存在指定名称的校验器
 * 参数(name)：校验器名称
 */
ModuleValidatorFactory.prototype.Contains = function (name) {
    return (name in validators);
}
/*
 * 名称：根据指定校验器名称获取校验器
 * 参数(name)：校验器名称
 */
ModuleValidatorFactory.prototype.GetValidator = function (name) {
    return validators[name] || DEFAULT;
}
/*
 * 名称：获取一个验证结果对象
 * 参数(valid)：初始化的验证结果
 * 参数(message)：初始化的验证结果消息
 */
ModuleValidatorFactory.prototype.GetEmptyResult = function (valid, message) {
    return ModuleValidator.prototype.GetEmptyResult(valid, message);
}


/*--------------------------校验器原型定义-------------------------*/

//校验器名称
ModuleValidator.prototype.Name = null;
//校验器消息
ModuleValidator.prototype.InvalidMessage = "";
//校验函数
ModuleValidator.prototype.ValidateHandler = null;
//校验环境 默认(0)前台后台都可以校验 1:仅在前台 2:仅在后台
ModuleValidator.prototype.Enviroment = 0;

/*
 * 名称：校验器校验方法
 * 参数(v)：待校验的值
 * 参数(element)：如果是表单验证 怎会传入一个dom元素 否则为null
 * 参数(context)：校验上下文{ rule: 校验配置对象, paras: 校验函数需要的参数数组[1,2,'name'] };
 * 参数(callback)：如果当前校验器为异步校验器 则请在校验完毕后调用callback函数
 */
ModuleValidator.prototype.Validate = function (v, element, context, callback) {
    var r = this.GetEmptyResult(true, localize.defaultValidatorString);
    if (this.Enviroment == ENV.OnlyBack && element != null) {
        //如果在前台校验后台校验器
        r = this.GetEmptyResult(true, localize.onlyBackValidatorString);
    } else if (this.Enviroment == ENV.OnlyForm && element == null) {
        //如果在后台校验前台校验器
        r = this.GetEmptyResult(true, localize.onlyFormValidatorString);
    } else {
        var rule = context.rule || {};
        if (typeQues.isFunction(this.ValidateHandler)) {
            //这里注意：如果您的校验器是异步的校验器 请在校验结果后 调用传入的callback
            var n = this.ValidateHandler(v, element, context.paras, context, callback);
            r = this.OnValidateFinal(n, context, callback);
        }
    }
    return r;
}
/*
 * 名称：校验完毕事件 如果是异步校验则不进行回调，回调委托到异步校验函数在校验完毕后执行
 * 参数(n)：校验结果
 * 参数(context)：校验上下文{ rule: 校验配置对象, paras: 校验函数需要的参数数组[1,2,'name'] };
 * 参数(callBack)：校验完毕后的回调函数
 */
ModuleValidator.prototype.OnValidateFinal = function (n, context, callBack) {
    if (typeQues.isBoolean(n)) {
        var r = this.GetEmptyResult(n);
        var rule = context.rule;
        if (!n) {
            r.valid = false;
            r.message = strUtil.Format2(strUtil.Undef(rule.InvalidMessage, this.InvalidMessage), context.paras);
        }
        if (typeQues.isFunction(callBack)) {
            callBack(r);
        }
        return r;
    }
}
/*
 * 名称：获取一个验证结果对象
 * 参数(valid)：初始化的验证结果
 * 参数(message)：初始化的验证结果消息
 */
ModuleValidator.prototype.GetEmptyResult = function (valid, message) {
    return { valid: valid, message: (message || "") };
}

//初始化校验器
function Init(name, fn, message, env) {
    this.Name = name;
    this.ValidateHandler = fn;
    this.InvalidMessage = message;
    this.Enviroment = env;
}

/*------------------------默认校验器------------------------------*/
//1.非空校验器
Factory.CreateValidator('required', messages.required, function (v, element, param) {
    return !strUtil.IsNullOrWhiteSpace(v);
});
//2.邮件校验器
Factory.CreateValidator('email', messages.email, function (value, element, param) {
    return /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
});
//3.url地址校验器
Factory.CreateValidator('url', messages.url, function (value, element, param) {
    return /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
});
//4.时间校验器
Factory.CreateValidator('date', messages.date, function (value, element, param) {
    return !/Invalid|NaN/.test(new Date(value).toString());
});
//5.ISO时间格式校验器
Factory.CreateValidator('dateISO', messages.dateISO, function (value, element, param) {
    return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
});
//6.整数格式校验器
Factory.CreateValidator('number', messages.number, function (value, element, param) {
    return /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
});
//7.数字格式校验器
Factory.CreateValidator('digits', messages.digits, function (value, element, param) {
    return /^\d+$/.test(value);
});
//8.银行卡号校验器
Factory.CreateValidator('creditcard', messages.creditcard, function (value, element, param) {
    if (/[^0-9 \-]+/.test(value)) {
        return false;
    }
    var nCheck = 0,
        nDigit = 0,
        bEven = false,
        n, cDigit;
    
    value = value.replace(/\D/g, "");
    
    if (value.length < 13 || value.length > 19) {
        return false;
    }
    for (n = value.length - 1; n >= 0; n--) {
        cDigit = value.charAt(n);
        nDigit = parseInt(cDigit, 10);
        if (bEven) {
            if ((nDigit *= 2) > 9) {
                nDigit -= 9;
            }
        }
        nCheck += nDigit;
        bEven = !bEven;
    }
    return (nCheck % 10) === 0;
});
//9.最小长度校验器
Factory.CreateValidator('minlength', messages.minlength, function (value, element, param) {
    return (value || '').length >= param[0];
});
//10.最大长度校验器
Factory.CreateValidator('maxlength', messages.maxlength, function (value, element, param) {
    return (value || '').length <= param[0];
});
//11.长度范围校验
Factory.CreateValidator('rangelength', messages.rangelength, function (value, element, param) {
    var len = (value || '').length;
    return len >= param[0] && len <= param[1];
});
//12.最小值校验器
Factory.CreateValidator('min', messages.min, function (value, element, param) {
    return value >= param[0];
});
//13.最大值校验
Factory.CreateValidator('max', messages.max, function (value, element, param) {
    return value <= param[0];
});
//14.值范围校验
Factory.CreateValidator('range', messages.range, function (value, element, param) {
    return value >= param[0] && value <= param[1];
});
//15.元素值相等比较校验器 只能在前台使用
Factory.CreateValidator('equalTo', messages.equalTo, Factory.Env.OnlyForm, function (value, element, param) {
    var target = $(param[0]);
    return value === target.val();
});
//16.远程校验
Factory.CreateValidator('remote', messages.remote, Factory.Env.OnlyForm, function (value, element, param, context, callback) {
    var data = {};
    data[element.name] = value;
    var self = this;
    $.ajax({
        url: param[0],
        dataType: "json",
        data: data,
        success: function (response) {
            var valid = response === true || response === "true";
            self.OnValidateFinal(valid, context, callback);
        },
        error: function () {
            self.OnValidateFinal(false, context, callback);
        }
    });
});