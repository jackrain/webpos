/*********************************************
 * 名称：扩展 backbone 主要是重写backbone的相关方法
 * 日期：2014-12-10
 * 描述：例如 重写backbone的sync方法 我们这里是保存到本地数据库 而不是远程ajax请求
 * 作者：Beven
 **********************************************/
var backbone = require('backbone');
var dataAPI = require('../lib/data.api.js');
var localize = require('../lib/locale/localize.js');
var typeQues = require('../lib/check.js');

var BackBoneExtension = function () { }

/*
 * 名称：本地数据库操作调度
 * 参数(command) 操作命令 例如:create/update/read/delete
 * 参数(data)：这里为backbone实体类实例
 * 参数（options)：backbone.sync方法传递的options参数其中包括 error函数与success函数
 */
BackBoneExtension.prototype.Sync = function (command, data, options) {
    if (!this.IsBackboneModel(data)) {
        return options.error(localize.syncModelInvalidString);
    }
    var modelClass = data.constructor;
    if (!typeQues.isObject(modelClass.relation)) {
        return options.error(localize.syncModelRelationInvalidString);
    }
    dataAPI.rest(command, this.ChangeModel(data), modelClass.relation, function (err, context) {
        if (err) {
            options.error(err);
        } else {
            options.success();
        }
    });
}
/*
 * 名称：检测传入对象是否为backbone model类型
 * 参数：待校验的值
 */
BackBoneExtension.prototype.IsBackboneModel = function (o) {
    return o instanceof backbone.Model;
}
/*
 * 名称：将backbone的model转换为sqliteAccessor需要的结构数据：{table:'aa',data:[]}
 * 参数(data)：待转换的backbone model实例
 * 参数(noCheck)：是否检查子级对象
 */
BackBoneExtension.prototype.ChangeModel = function (data, noCheck) {
    var instance = {};
    var attributes = data.attributes;
    var v = null;
    for (var attr in attributes) {
        v = attributes[attr];
        //防止无限递归 默认值探测一级
        if (this.IsBackboneModel(v) && noCheck != false) {
            v = this.ChangeModel(v, false);
        }
        instance[attr] = v;
    }
    return instance;
}

var extensionInstance = new BackBoneExtension();

/*
 * 名称：重写backbone sync为 存储到本地数据库
 * 参数(command) 操作命令 例如:create/update/read/delete
 * 参数(data)：这里为backbone实体类实例
 * 参数（options)：backbone.sync方法传递的options参数其中包括 error函数与success函数
 */
backbone.sync = function (command, data, options) {
    return extensionInstance.Sync(command, data, options);
}