/*********************************************************
 * 名称：字符串通用处理工具
 * 日期：2014-11-22
 * 描述：包含一些通用的字符串处理函数 例如：去空格，格式化等等
 * 作者：Beven
 * *******************************************************/
var StringUtil = function () { }

module.exports = new StringUtil();

/*
 * 名称：1.简单字符串格式化工具
 * 参数(str)：格式化模板字符串
 * 参数(arg1-argN)：每个占位{0}-{N}对应的值
 */
StringUtil.prototype.Format = function (str, arg1, arg2, argN) {
    if (str) {
        var args = Array.prototype.slice.call(arguments, 1);
        str = str.replace(/\{\d+\}/g, function (a) {
            var s = args[a.slice(1, a.length - 1)];
            return s == null?a:s;
        });
    }
    return str;
}

/*
 * 名称：1.简单字符串格式化工具
 * 参数(str)：格式化模板字符串
 * 参数(args)：每个占位{0}-{N}对应的数组值[1,2,3,4]
 */
StringUtil.prototype.Format2 = function (str, args) {
    if (str) {
        str = str.replace(/\{\d+\}/g, function (a) {
            var s = args[a.slice(1, a.length - 1)];
            return s == null?a:s;
        });
    }
    return str;
}

/*
 * 名称：2.字符串检测 是否以xx开头
 * 参数(s)：原始字符串
 * 参数(s2)：包含字符串
 * 参数(ignore)：是否忽略大小写
 */
//
StringUtil.prototype.StartsWidth = function (s, s2, ignoreCase) {
    if (s == null || s2 == null || s2 == '') {
        return false;
    } else if (ignoreCase) {
        return s.substring(0, s2.length).toLowerCase() == s2.toLowerCase();
    } else {
        return s.substring(0, s2.length) == s2;
    }
}
/*
 * 名称：3.字符串检测 是否以XX结尾  
 * 参数(s)：原始字符串
 * 参数(s2)：包含字符串
 * 参数(ignore)：是否忽略大小写
 */
StringUtil.prototype.EndsWidth = function (s, s2, ignoreCase) {
    if (s == null || s2 == null || s2 == '') {
        return false;
    } else if (ignoreCase) {
        return s.substring(s.length - s2.length).toLowerCase() == s2.toLowerCase();
    } else {
        return s.substring(s.length - s2.length) == s2;
    }
}
/*
 * 名称：4. 去掉字符串开始的指定字符串
 * 参数(s)：待处理字符串
 * 参数(trim)：需要去掉的开始字符串
 * 参数(ignore)：是否忽略大小写
 */
StringUtil.prototype.TrimStart = function (s, trim, ignoreCase) {
    if (this.StartsWidth(s, trim, ignoreCase)) {
        return s.substring(trim.length);
    } else {
        return s;
    }
}
/*
 * 名称：5.去掉字符串末尾指定字符串
 * 参数(s)：待处理字符串
 * 参数(trim)：需要去掉的末尾字符串
 * 参数(ignore)：是否忽略大小写
 */
StringUtil.prototype.TrimEnd = function (s, trim, ignoreCase) {
    if (this.EndsWidth(s, trim, ignoreCase)) {
        return s.substring(0, s.length - trim.length);
    } else {
        return s;
    }
}
/*
 * 名称：6.判断指定字符串是否为null或者为空字符串
 * 参数(s)：字符串
 */
StringUtil.prototype.IsNullOrEmpty = function (s) {
    return !(s != null && s != '');
}
/*
 * 名称：7.判断指定值是否为null或者为 包含空格的字符串
 * 参数(s)：字符串
 */
StringUtil.prototype.IsNullOrWhiteSpace = function (s) {
    if (this.IsNullOrEmpty(s)) {
        return true;
    } else {
        return this.TrimAll(s.toString()) == '';
    }
}
/*
 * 名称：8.却掉指定字符串的所有空格
 * 参数(s)：字符串
 */
StringUtil.prototype.TrimAll = function (s) {
    if (s) {
        return s.replace(/\s+/g, '');
    } else {
        return '';
    }
}
/*
 * 名称：9.去掉字符串左边空格
 * 参数(s)：字符串
 */
StringUtil.prototype.TrimLeft = function (s) {
    if (s) {
        return s.replace(/^\s+/g, '');
    } else {
        return '';
    }
}
/*
 * 名称：10.去掉字符串左边空格
 * 参数(s)：字符串
 */
StringUtil.prototype.TrimRight = function (s) {
    if (s) {
        return s.replace(/\s%/g, '');
    } else {
        return '';
    }
}
/*
 * 名称：11.去掉字符串左右两边的空格
 * 参数(s)：字符串
 */
StringUtil.prototype.Trim = function (s) {
    if (s) {
        return this.TrimRight(this.TrimLeft(s));
    } else {
        return '';
    }
}
/*
 * 名称：12比较连个字符串是否相等
 * 参数(a)：字符串1
 * 参数(b)：字符串2
 * 参数(ignore)：是否忽略大小写
 */
StringUtil.prototype.Equals = function (a, b, ignore) {
    if (ignore == true) {
        return (a || '').toString().toLocaleLowerCase() == (b || '').toString().toLocaleLowerCase();
    } else {
        return a == b;
    }
}
/*
 * 名称：13 如果传入字符串为空或者多个空格则将值替换成指定值
 * 参数(v)：字符串
 * 参数(dv)：替代字符串
 */
StringUtil.prototype.Undef = function (v, dv) {
    if (this.IsNullOrWhiteSpace(v)) {
        return dv;
    } else {
        return v;
    }
}
/*
 * 名称：14.判断传入值是否为String类型
 * 参数(v)：字符串
 */
StringUtil.prototype.IsString = function (v) {
    return Object.prototype.toString.apply(v) == "[object String]";
}
